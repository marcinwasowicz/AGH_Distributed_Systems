# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.5
#
# <auto-generated>
#
# Generated from file `DynamicExample.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy
import HelperTypes_ice

# Included module HelperTypes
_M_HelperTypes = Ice.openModule('HelperTypes')

# Start of module DynamicExample
_M_DynamicExample = Ice.openModule('DynamicExample')
__name__ = 'DynamicExample'

_M_DynamicExample._t_DynamicInvocations = IcePy.defineValue('::DynamicExample::DynamicInvocations', Ice.Value, -1, (), False, True, None, ())

if 'DynamicInvocationsPrx' not in _M_DynamicExample.__dict__:
    _M_DynamicExample.DynamicInvocationsPrx = Ice.createTempClass()
    class DynamicInvocationsPrx(Ice.ObjectPrx):

        def groupByKey(self, seq, context=None):
            return _M_DynamicExample.DynamicInvocations._op_groupByKey.invoke(self, ((seq, ), context))

        def groupByKeyAsync(self, seq, context=None):
            return _M_DynamicExample.DynamicInvocations._op_groupByKey.invokeAsync(self, ((seq, ), context))

        def begin_groupByKey(self, seq, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicExample.DynamicInvocations._op_groupByKey.begin(self, ((seq, ), _response, _ex, _sent, context))

        def end_groupByKey(self, _r):
            return _M_DynamicExample.DynamicInvocations._op_groupByKey.end(self, _r)

        def reverseDict(self, dict, context=None):
            return _M_DynamicExample.DynamicInvocations._op_reverseDict.invoke(self, ((dict, ), context))

        def reverseDictAsync(self, dict, context=None):
            return _M_DynamicExample.DynamicInvocations._op_reverseDict.invokeAsync(self, ((dict, ), context))

        def begin_reverseDict(self, dict, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicExample.DynamicInvocations._op_reverseDict.begin(self, ((dict, ), _response, _ex, _sent, context))

        def end_reverseDict(self, _r):
            return _M_DynamicExample.DynamicInvocations._op_reverseDict.end(self, _r)

        def countOccurences(self, group, context=None):
            return _M_DynamicExample.DynamicInvocations._op_countOccurences.invoke(self, ((group, ), context))

        def countOccurencesAsync(self, group, context=None):
            return _M_DynamicExample.DynamicInvocations._op_countOccurences.invokeAsync(self, ((group, ), context))

        def begin_countOccurences(self, group, _response=None, _ex=None, _sent=None, context=None):
            return _M_DynamicExample.DynamicInvocations._op_countOccurences.begin(self, ((group, ), _response, _ex, _sent, context))

        def end_countOccurences(self, _r):
            return _M_DynamicExample.DynamicInvocations._op_countOccurences.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_DynamicExample.DynamicInvocationsPrx.ice_checkedCast(proxy, '::DynamicExample::DynamicInvocations', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_DynamicExample.DynamicInvocationsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::DynamicExample::DynamicInvocations'
    _M_DynamicExample._t_DynamicInvocationsPrx = IcePy.defineProxy('::DynamicExample::DynamicInvocations', DynamicInvocationsPrx)

    _M_DynamicExample.DynamicInvocationsPrx = DynamicInvocationsPrx
    del DynamicInvocationsPrx

    _M_DynamicExample.DynamicInvocations = Ice.createTempClass()
    class DynamicInvocations(Ice.Object):

        def ice_ids(self, current=None):
            return ('::DynamicExample::DynamicInvocations', '::Ice::Object')

        def ice_id(self, current=None):
            return '::DynamicExample::DynamicInvocations'

        @staticmethod
        def ice_staticId():
            return '::DynamicExample::DynamicInvocations'

        def groupByKey(self, seq, current=None):
            raise NotImplementedError("servant method 'groupByKey' not implemented")

        def reverseDict(self, dict, current=None):
            raise NotImplementedError("servant method 'reverseDict' not implemented")

        def countOccurences(self, group, current=None):
            raise NotImplementedError("servant method 'countOccurences' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_DynamicExample._t_DynamicInvocationsDisp)

        __repr__ = __str__

    _M_DynamicExample._t_DynamicInvocationsDisp = IcePy.defineClass('::DynamicExample::DynamicInvocations', DynamicInvocations, (), None, ())
    DynamicInvocations._ice_type = _M_DynamicExample._t_DynamicInvocationsDisp

    DynamicInvocations._op_groupByKey = IcePy.Operation('groupByKey', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HelperTypes._t_DictSeq, False, 0),), (), ((), _M_HelperTypes._t_GroupedIntegersDict, False, 0), ())
    DynamicInvocations._op_reverseDict = IcePy.Operation('reverseDict', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HelperTypes._t_StrToIntDict, False, 0),), (), ((), _M_HelperTypes._t_GroupedStringDict, False, 0), ())
    DynamicInvocations._op_countOccurences = IcePy.Operation('countOccurences', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_HelperTypes._t_IntegerGroup, False, 0),), (), ((), _M_HelperTypes._t_CountDict, False, 0), ())

    _M_DynamicExample.DynamicInvocations = DynamicInvocations
    del DynamicInvocations

# End of module DynamicExample
