//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Office.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Office;

public class basicCaseData implements java.lang.Cloneable,
                                      java.io.Serializable
{
    public int uniqueID;

    public Notification.timeStamp registrationTime;

    public basicCaseData()
    {
        this.registrationTime = new Notification.timeStamp();
    }

    public basicCaseData(int uniqueID, Notification.timeStamp registrationTime)
    {
        this.uniqueID = uniqueID;
        this.registrationTime = registrationTime;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        basicCaseData r = null;
        if(rhs instanceof basicCaseData)
        {
            r = (basicCaseData)rhs;
        }

        if(r != null)
        {
            if(this.uniqueID != r.uniqueID)
            {
                return false;
            }
            if(this.registrationTime != r.registrationTime)
            {
                if(this.registrationTime == null || r.registrationTime == null || !this.registrationTime.equals(r.registrationTime))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Office::basicCaseData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, uniqueID);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, registrationTime);
        return h_;
    }

    public basicCaseData clone()
    {
        basicCaseData c = null;
        try
        {
            c = (basicCaseData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.uniqueID);
        Notification.timeStamp.ice_write(ostr, this.registrationTime);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.uniqueID = istr.readInt();
        this.registrationTime = Notification.timeStamp.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, basicCaseData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public basicCaseData ice_read(com.zeroc.Ice.InputStream istr)
    {
        basicCaseData v = new basicCaseData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<basicCaseData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, basicCaseData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(16);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<basicCaseData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(basicCaseData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final basicCaseData _nullMarshalValue = new basicCaseData();

    /** @hidden */
    public static final long serialVersionUID = -351292145L;
}
