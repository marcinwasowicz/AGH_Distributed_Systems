//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Notification.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Notification;

public class caseResult implements java.lang.Cloneable,
                                   java.io.Serializable
{
    public timeStamp registrationTimeStamp;

    public int expectedResolutionTime;

    public String resultMessage;

    public caseResult()
    {
        this.registrationTimeStamp = new timeStamp();
        this.resultMessage = "";
    }

    public caseResult(timeStamp registrationTimeStamp, int expectedResolutionTime, String resultMessage)
    {
        this.registrationTimeStamp = registrationTimeStamp;
        this.expectedResolutionTime = expectedResolutionTime;
        this.resultMessage = resultMessage;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        caseResult r = null;
        if(rhs instanceof caseResult)
        {
            r = (caseResult)rhs;
        }

        if(r != null)
        {
            if(this.registrationTimeStamp != r.registrationTimeStamp)
            {
                if(this.registrationTimeStamp == null || r.registrationTimeStamp == null || !this.registrationTimeStamp.equals(r.registrationTimeStamp))
                {
                    return false;
                }
            }
            if(this.expectedResolutionTime != r.expectedResolutionTime)
            {
                return false;
            }
            if(this.resultMessage != r.resultMessage)
            {
                if(this.resultMessage == null || r.resultMessage == null || !this.resultMessage.equals(r.resultMessage))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Notification::caseResult");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, registrationTimeStamp);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, expectedResolutionTime);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, resultMessage);
        return h_;
    }

    public caseResult clone()
    {
        caseResult c = null;
        try
        {
            c = (caseResult)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        timeStamp.ice_write(ostr, this.registrationTimeStamp);
        ostr.writeInt(this.expectedResolutionTime);
        ostr.writeString(this.resultMessage);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.registrationTimeStamp = timeStamp.ice_read(istr);
        this.expectedResolutionTime = istr.readInt();
        this.resultMessage = istr.readString();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, caseResult v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public caseResult ice_read(com.zeroc.Ice.InputStream istr)
    {
        caseResult v = new caseResult();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<caseResult> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, caseResult v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<caseResult> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(caseResult.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final caseResult _nullMarshalValue = new caseResult();

    /** @hidden */
    public static final long serialVersionUID = -831716924L;
}
